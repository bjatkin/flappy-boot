// This is generated code. DO NOT EDIT

package lut

import (
	"github.com/bjatkin/flappy_boot/internal/math"
)

var sinLut = []math.Fix8 {
	math.Fix8(0x0000), // 0.000000 -> 0
	math.Fix8(0x0019), // 0.015625 -> 0.09765625
	math.Fix8(0x0032), // 0.031250 -> 0.1953125
	math.Fix8(0x004A), // 0.046875 -> 0.2890625
	math.Fix8(0x0062), // 0.062500 -> 0.3828125
	math.Fix8(0x0079), // 0.078125 -> 0.47265625
	math.Fix8(0x008E), // 0.093750 -> 0.5546875
	math.Fix8(0x00A2), // 0.109375 -> 0.6328125
	math.Fix8(0x00B5), // 0.125000 -> 0.70703125
	math.Fix8(0x00C6), // 0.140625 -> 0.7734375
	math.Fix8(0x00D5), // 0.156250 -> 0.83203125
	math.Fix8(0x00E2), // 0.171875 -> 0.8828125
	math.Fix8(0x00ED), // 0.187500 -> 0.92578125
	math.Fix8(0x00F5), // 0.203125 -> 0.95703125
	math.Fix8(0x00FB), // 0.218750 -> 0.98046875
	math.Fix8(0x00FF), // 0.234375 -> 0.99609375
	math.Fix8(0x0100), // 0.250000 -> 1
	math.Fix8(0x00FF), // 0.265625 -> 0.99609375
	math.Fix8(0x00FB), // 0.281250 -> 0.98046875
	math.Fix8(0x00F5), // 0.296875 -> 0.95703125
	math.Fix8(0x00ED), // 0.312500 -> 0.92578125
	math.Fix8(0x00E2), // 0.328125 -> 0.8828125
	math.Fix8(0x00D5), // 0.343750 -> 0.83203125
	math.Fix8(0x00C6), // 0.359375 -> 0.7734375
	math.Fix8(0x00B5), // 0.375000 -> 0.70703125
	math.Fix8(0x00A2), // 0.390625 -> 0.6328125
	math.Fix8(0x008E), // 0.406250 -> 0.5546875
	math.Fix8(0x0079), // 0.421875 -> 0.47265625
	math.Fix8(0x0062), // 0.437500 -> 0.3828125
	math.Fix8(0x004A), // 0.453125 -> 0.2890625
	math.Fix8(0x0032), // 0.468750 -> 0.1953125
	math.Fix8(0x0019), // 0.484375 -> 0.09765625
	math.Fix8(0x0000), // 0.500000 -> 0
	math.Fix8(-0x0019), // 0.515625 -> -0.09765625
	math.Fix8(-0x0032), // 0.531250 -> -0.1953125
	math.Fix8(-0x004A), // 0.546875 -> -0.2890625
	math.Fix8(-0x0062), // 0.562500 -> -0.3828125
	math.Fix8(-0x0079), // 0.578125 -> -0.47265625
	math.Fix8(-0x008E), // 0.593750 -> -0.5546875
	math.Fix8(-0x00A2), // 0.609375 -> -0.6328125
	math.Fix8(-0x00B5), // 0.625000 -> -0.70703125
	math.Fix8(-0x00C6), // 0.640625 -> -0.7734375
	math.Fix8(-0x00D5), // 0.656250 -> -0.83203125
	math.Fix8(-0x00E2), // 0.671875 -> -0.8828125
	math.Fix8(-0x00ED), // 0.687500 -> -0.92578125
	math.Fix8(-0x00F5), // 0.703125 -> -0.95703125
	math.Fix8(-0x00FB), // 0.718750 -> -0.98046875
	math.Fix8(-0x00FF), // 0.734375 -> -0.99609375
	math.Fix8(-0x0100), // 0.750000 -> -1
	math.Fix8(-0x00FF), // 0.765625 -> -0.99609375
	math.Fix8(-0x00FB), // 0.781250 -> -0.98046875
	math.Fix8(-0x00F5), // 0.796875 -> -0.95703125
	math.Fix8(-0x00ED), // 0.812500 -> -0.92578125
	math.Fix8(-0x00E2), // 0.828125 -> -0.8828125
	math.Fix8(-0x00D5), // 0.843750 -> -0.83203125
	math.Fix8(-0x00C6), // 0.859375 -> -0.7734375
	math.Fix8(-0x00B5), // 0.875000 -> -0.70703125
	math.Fix8(-0x00A2), // 0.890625 -> -0.6328125
	math.Fix8(-0x008E), // 0.906250 -> -0.5546875
	math.Fix8(-0x0079), // 0.921875 -> -0.47265625
	math.Fix8(-0x0062), // 0.937500 -> -0.3828125
	math.Fix8(-0x004A), // 0.953125 -> -0.2890625
	math.Fix8(-0x0032), // 0.968750 -> -0.1953125
	math.Fix8(-0x0019), // 0.984375 -> -0.09765625
}

// Sin takes fixed point input and returns the sin(f*2pi). The result ranges from -1 to 1
func Sin(f math.Fix8) math.Fix8 {
	// only take most significant 6 bits since that's the same precision as the generated look up table
	f &= 0x00FC 
	f >>= 2

	return sinLut[f]
}
